//Use StampedLock in Resource classes instead of Lock


//WriteLock allows exclusive access on the lock
@Override
public void run() {
		
		try {
			long writeLockOneStamp = rOne.rOneLock.writeLock();
			
			System.out.println("Lock aquired on ResourceOne by "
						+ Thread.currentThread().getName()+". Lock stamp is " + writeLockOneStamp);
			
			Thread.sleep(1000);
			rOne.myVar++;
			
			rOne.rOneLock.unlock(writeLockOneStamp);
			
			System.out.println("Lock on ResourceOne released by "
					+ Thread.currentThread().getName());
			
			long writeLockTwoStamp = rTwo.rTwoLock.writeLock();
			
			System.out.println("Lock aquired on ResourceOne by "
						+ Thread.currentThread().getName());
			
			Thread.sleep(1000);
			rTwo.myVar--;
			
			rTwo.rTwoLock.unlock(writeLockTwoStamp);
			
			System.out.println("Lock on ResourceTwo released by "
					+ Thread.currentThread().getName());
			
		}catch(InterruptedException e) {
			e.printStackTrace();
		}
		
	}
	
//Readlock doesnt allow exclusive access to the lock
//However, a readLock can block the thread if another thread has a writeLock on the same object
//Apparently this is not the correct way to use a read lock and just an example
@Override
public void run() {
		
		try {
			long readLockOneStamp = rOne.rOneLock.readLock();
			
			System.out.println("Lock aquired on ResourceOne by "
						+ Thread.currentThread().getName()+". Lock stamp is " + writeLockOneStamp);
			rOne.myVar++;
			Thread.sleep(1000);
			
			rOne.rOneLock.unlock(readLockOneStamp);
			
			System.out.println("Lock on ResourceOne released by "
					+ Thread.currentThread().getName());
			
			long readLockTwoStamp = rTwo.rTwoLock.readLock();
			
			System.out.println("Lock aquired on ResourceOne by "
						+ Thread.currentThread().getName());
			rTwo.myVar--;
			Thread.sleep(1000);
			
			rTwo.rTwoLock.unlock(readLockTwoStamp);
			
			System.out.println("Lock on ResourceTwo released by "
					+ Thread.currentThread().getName());
			
		}catch(InterruptedException e) {
			e.printStackTrace();
		}
		
	}